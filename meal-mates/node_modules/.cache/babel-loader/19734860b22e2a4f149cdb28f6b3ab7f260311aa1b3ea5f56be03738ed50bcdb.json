{"ast":null,"code":"import axios from 'axios';\nimport { GeoLocation, wait } from \"./GeoLocation\";\n\n// Have to allow cross-control open access\n// Have to open terminal and use the following lines (make sure in open terminal)\n// open -na Google\\ Chrome --args --user-data-dir=/tmp/temporary-chrome-profile-dir --disable-web-security\n\n//inputOpenAt is if the location is open in 30 minutes or not; has to use the Unix time code\n//inputPrice is an integer array, with options of being: 1,2,3,4; 1 is cheapest, 4 is Gordon Ramsay\nexport function getRestInformation(inputLocation, inputPrice) {\n  const options = {\n    method: 'GET',\n    url: 'https://api.yelp.com/v3/businesses/search',\n    params: {\n      location: inputLocation,\n      // latitude: lat,\n      // longitude: long,\n      price: inputPrice,\n      open_at: ThirtyMinFromNow(),\n      // Date now is unix time of now, 1800 is unix for + 30 minutes\n      sort_by: 'distance',\n      radius: 8047,\n      limit: '20' // randomize the limit that gets returned, min: 0, max: 50\n    },\n\n    headers: {\n      accept: 'application/json',\n      Authorization: 'Bearer l5_sN8Upkix19lLgwHxpAMThs0G2RBKr0rNRPxJ7ZmlOFagJ9EMi_1vv9o0BJNsto0R0hU1enjBhinEDROi6zODQWf_Tdzk2Lhq47-Z1Xz8EP2EEmjws8MyqSp-LY3Yx'\n    }\n  };\n  // Want to get name, distance, image_url, categories\n  let myWork = [];\n  axios.request(options).then(function (response) {\n    // for (let i = 0; i < 20; i++) {\n    // let x = response.data\n    // myWork.push(response.data.businesses[i])\n    myWork = response.data['businesses'];\n    console.log(myWork);\n    // let = response.data.businesses\n    // myWork.push(e)\n    //is all the businesses of the list of things that you can retrieve\n    // }\n    // This code doesn't even get reached?\n    //ans.push(e.name, e.distance, e.image_url, e.categories) // to retrieve these specific values\n  }).catch(function (error) {\n    console.error(error);\n  });\n  // let myNewJSON = {table:[]}\n  // let json = JSON.stringify(myWork);\n  //\n  // let fs = require('fs');\n  // fs.writeFile('myjsonfile.json', json, 'utf8', callback);\n\n  return myWork;\n}\nexport function ThirtyMinFromNow() {\n  const newDate = Date.now();\n  const date = new Date(newDate);\n  return Math.floor(date.getTime() / 1000) + 1800;\n}\n_c = ThirtyMinFromNow;\nvar _c;\n$RefreshReg$(_c, \"ThirtyMinFromNow\");","map":{"version":3,"names":["axios","GeoLocation","wait","getRestInformation","inputLocation","inputPrice","options","method","url","params","location","price","open_at","ThirtyMinFromNow","sort_by","radius","limit","headers","accept","Authorization","myWork","request","then","response","data","console","log","catch","error","newDate","Date","now","date","Math","floor","getTime"],"sources":["/Users/andrew/CS/Classes/EC327/Food-Tinder-EC327-Project/meal-mates/src/components/APIs/YelpAPI.js"],"sourcesContent":["import axios from 'axios';\nimport {GeoLocation, wait} from \"./GeoLocation\";\n\n// Have to allow cross-control open access\n// Have to open terminal and use the following lines (make sure in open terminal)\n// open -na Google\\ Chrome --args --user-data-dir=/tmp/temporary-chrome-profile-dir --disable-web-security\n\n//inputOpenAt is if the location is open in 30 minutes or not; has to use the Unix time code\n//inputPrice is an integer array, with options of being: 1,2,3,4; 1 is cheapest, 4 is Gordon Ramsay\nexport function getRestInformation(inputLocation, inputPrice) {\n    const options = {\n        method: 'GET',\n        url: 'https://api.yelp.com/v3/businesses/search',\n        params: {\n            location: inputLocation,\n            // latitude: lat,\n            // longitude: long,\n            price: inputPrice,\n            open_at: ThirtyMinFromNow(), // Date now is unix time of now, 1800 is unix for + 30 minutes\n            sort_by: 'distance',\n            radius: 8047,\n            limit: '20' // randomize the limit that gets returned, min: 0, max: 50\n        },\n        headers: {\n            accept: 'application/json',\n            Authorization:\n                'Bearer l5_sN8Upkix19lLgwHxpAMThs0G2RBKr0rNRPxJ7ZmlOFagJ9EMi_1vv9o0BJNsto0R0hU1enjBhinEDROi6zODQWf_Tdzk2Lhq47-Z1Xz8EP2EEmjws8MyqSp-LY3Yx'\n        }\n    };\n    // Want to get name, distance, image_url, categories\n    let myWork = []\n    axios\n        .request(options)\n        .then(function (response) {\n            // for (let i = 0; i < 20; i++) {\n                // let x = response.data\n                // myWork.push(response.data.businesses[i])\n            myWork = response.data['businesses']\n            console.log(myWork)\n            // let = response.data.businesses\n            // myWork.push(e)\n                //is all the businesses of the list of things that you can retrieve\n            // }\n            // This code doesn't even get reached?\n            //ans.push(e.name, e.distance, e.image_url, e.categories) // to retrieve these specific values\n        })\n        .catch(function (error) {\n            console.error(error);\n        });\n    // let myNewJSON = {table:[]}\n    // let json = JSON.stringify(myWork);\n    //\n    // let fs = require('fs');\n    // fs.writeFile('myjsonfile.json', json, 'utf8', callback);\n\n    return myWork\n}\nexport function ThirtyMinFromNow(){\n    const newDate = Date.now()\n    const date = new Date(newDate)\n    return (Math.floor(date.getTime()/1000) + 1800)\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,WAAW,EAAEC,IAAI,QAAO,eAAe;;AAE/C;AACA;AACA;;AAEA;AACA;AACA,OAAO,SAASC,kBAAkB,CAACC,aAAa,EAAEC,UAAU,EAAE;EAC1D,MAAMC,OAAO,GAAG;IACZC,MAAM,EAAE,KAAK;IACbC,GAAG,EAAE,2CAA2C;IAChDC,MAAM,EAAE;MACJC,QAAQ,EAAEN,aAAa;MACvB;MACA;MACAO,KAAK,EAAEN,UAAU;MACjBO,OAAO,EAAEC,gBAAgB,EAAE;MAAE;MAC7BC,OAAO,EAAE,UAAU;MACnBC,MAAM,EAAE,IAAI;MACZC,KAAK,EAAE,IAAI,CAAC;IAChB,CAAC;;IACDC,OAAO,EAAE;MACLC,MAAM,EAAE,kBAAkB;MAC1BC,aAAa,EACT;IACR;EACJ,CAAC;EACD;EACA,IAAIC,MAAM,GAAG,EAAE;EACfpB,KAAK,CACAqB,OAAO,CAACf,OAAO,CAAC,CAChBgB,IAAI,CAAC,UAAUC,QAAQ,EAAE;IACtB;IACI;IACA;IACJH,MAAM,GAAGG,QAAQ,CAACC,IAAI,CAAC,YAAY,CAAC;IACpCC,OAAO,CAACC,GAAG,CAACN,MAAM,CAAC;IACnB;IACA;IACI;IACJ;IACA;IACA;EACJ,CAAC,CAAC,CACDO,KAAK,CAAC,UAAUC,KAAK,EAAE;IACpBH,OAAO,CAACG,KAAK,CAACA,KAAK,CAAC;EACxB,CAAC,CAAC;EACN;EACA;EACA;EACA;EACA;;EAEA,OAAOR,MAAM;AACjB;AACA,OAAO,SAASP,gBAAgB,GAAE;EAC9B,MAAMgB,OAAO,GAAGC,IAAI,CAACC,GAAG,EAAE;EAC1B,MAAMC,IAAI,GAAG,IAAIF,IAAI,CAACD,OAAO,CAAC;EAC9B,OAAQI,IAAI,CAACC,KAAK,CAACF,IAAI,CAACG,OAAO,EAAE,GAAC,IAAI,CAAC,GAAG,IAAI;AAClD;AAAC,KAJetB,gBAAgB;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}