{"ast":null,"code":"import axios from 'axios';\nimport { GeoLocation, wait } from \"./GeoLocation\";\nimport { useState } from \"@types/react\";\n\n// Have to allow cross-control open access\n// Have to open terminal and use the following lines (make sure in open terminal)\n// open -na Google\\ Chrome --args --user-data-dir=/tmp/temporary-chrome-profile-dir --disable-web-security\n\n//inputOpenAt is if the location is open in 30 minutes or not; has to use the Unix time code\n//inputPrice is an integer array, with options of being: 1,2,3,4; 1 is cheapest, 4 is Gordon Ramsay\n\nconst [dummy, setDummy] = useState(null);\nconst [index, setIndex] = useState(0);\n// let myLocation = new GeoLocation()\n// let long = myLocation.componentDidMount()\nfunction getRestInformation(inputLocation, inputPrice) {\n  const options = {\n    method: 'GET',\n    url: 'https://api.yelp.com/v3/businesses/search',\n    params: {\n      location: inputLocation,\n      // latitude: lat,\n      // longitude: long,\n      price: inputPrice,\n      // open_at: ThirtyMinFromNow(), // Date now is unix time of now, 1800 is unix for + 30 minutes\n      sort_by: 'distance',\n      radius: 8047,\n      limit: '20' // randomize the limit that gets returned, min: 0, max: 50\n    },\n\n    headers: {\n      accept: 'application/json',\n      Authorization: 'Bearer l5_sN8Upkix19lLgwHxpAMThs0G2RBKr0rNRPxJ7ZmlOFagJ9EMi_1vv9o0BJNsto0R0hU1enjBhinEDROi6zODQWf_Tdzk2Lhq47-Z1Xz8EP2EEmjws8MyqSp-LY3Yx'\n    }\n  };\n  // Want to get name, distance, image_url, categories\n  let myWork = [];\n  axios.request(options).then(function (response) {\n    console.log(\"success\");\n    myWork = response.data['businesses'];\n    setDummy(myWork);\n  }).catch(function (error) {\n    console.error(error);\n  });\n}\nconsole.log('dummy that works???', dummy);\nexport function ThirtyMinFromNow() {\n  const newDate = Date.now();\n  const date = new Date(newDate);\n  return Math.floor(date.getTime() / 1000) + 1800;\n}\n_c = ThirtyMinFromNow;\nvar _c;\n$RefreshReg$(_c, \"ThirtyMinFromNow\");","map":{"version":3,"names":["axios","GeoLocation","wait","useState","dummy","setDummy","index","setIndex","getRestInformation","inputLocation","inputPrice","options","method","url","params","location","price","sort_by","radius","limit","headers","accept","Authorization","myWork","request","then","response","console","log","data","catch","error","ThirtyMinFromNow","newDate","Date","now","date","Math","floor","getTime"],"sources":["/Users/andrew/CS/Classes/EC327/Food-Tinder-EC327-Project/meal-mates/src/components/APIs/YelpAPI.js"],"sourcesContent":["import axios from 'axios';\nimport {GeoLocation, wait} from \"./GeoLocation\";\nimport {useState} from \"@types/react\";\n\n// Have to allow cross-control open access\n// Have to open terminal and use the following lines (make sure in open terminal)\n// open -na Google\\ Chrome --args --user-data-dir=/tmp/temporary-chrome-profile-dir --disable-web-security\n\n//inputOpenAt is if the location is open in 30 minutes or not; has to use the Unix time code\n//inputPrice is an integer array, with options of being: 1,2,3,4; 1 is cheapest, 4 is Gordon Ramsay\n\nconst [dummy, setDummy] = useState(null)\nconst [index, setIndex] = useState(0)\n// let myLocation = new GeoLocation()\n// let long = myLocation.componentDidMount()\nfunction getRestInformation(inputLocation, inputPrice) {\n    const options = {\n        method: 'GET',\n        url: 'https://api.yelp.com/v3/businesses/search',\n        params: {\n            location: inputLocation,\n            // latitude: lat,\n            // longitude: long,\n            price: inputPrice,\n            // open_at: ThirtyMinFromNow(), // Date now is unix time of now, 1800 is unix for + 30 minutes\n            sort_by: 'distance',\n            radius: 8047,\n            limit: '20' // randomize the limit that gets returned, min: 0, max: 50\n        },\n        headers: {\n            accept: 'application/json',\n            Authorization:\n                'Bearer l5_sN8Upkix19lLgwHxpAMThs0G2RBKr0rNRPxJ7ZmlOFagJ9EMi_1vv9o0BJNsto0R0hU1enjBhinEDROi6zODQWf_Tdzk2Lhq47-Z1Xz8EP2EEmjws8MyqSp-LY3Yx'\n        }\n    };\n    // Want to get name, distance, image_url, categories\n    let myWork = []\n    axios\n        .request(options)\n        .then(function (response) {\n\n            console.log(\"success\")\n            myWork = response.data['businesses']\n            setDummy(myWork)\n\n        })\n        .catch(function (error) {\n            console.error(error);\n        });\n}\nconsole.log('dummy that works???', dummy)\n\nexport function ThirtyMinFromNow(){\n    const newDate = Date.now()\n    const date = new Date(newDate)\n    return (Math.floor(date.getTime()/1000) + 1800)\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,WAAW,EAAEC,IAAI,QAAO,eAAe;AAC/C,SAAQC,QAAQ,QAAO,cAAc;;AAErC;AACA;AACA;;AAEA;AACA;;AAEA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGF,QAAQ,CAAC,IAAI,CAAC;AACxC,MAAM,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAGJ,QAAQ,CAAC,CAAC,CAAC;AACrC;AACA;AACA,SAASK,kBAAkB,CAACC,aAAa,EAAEC,UAAU,EAAE;EACnD,MAAMC,OAAO,GAAG;IACZC,MAAM,EAAE,KAAK;IACbC,GAAG,EAAE,2CAA2C;IAChDC,MAAM,EAAE;MACJC,QAAQ,EAAEN,aAAa;MACvB;MACA;MACAO,KAAK,EAAEN,UAAU;MACjB;MACAO,OAAO,EAAE,UAAU;MACnBC,MAAM,EAAE,IAAI;MACZC,KAAK,EAAE,IAAI,CAAC;IAChB,CAAC;;IACDC,OAAO,EAAE;MACLC,MAAM,EAAE,kBAAkB;MAC1BC,aAAa,EACT;IACR;EACJ,CAAC;EACD;EACA,IAAIC,MAAM,GAAG,EAAE;EACfvB,KAAK,CACAwB,OAAO,CAACb,OAAO,CAAC,CAChBc,IAAI,CAAC,UAAUC,QAAQ,EAAE;IAEtBC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACtBL,MAAM,GAAGG,QAAQ,CAACG,IAAI,CAAC,YAAY,CAAC;IACpCxB,QAAQ,CAACkB,MAAM,CAAC;EAEpB,CAAC,CAAC,CACDO,KAAK,CAAC,UAAUC,KAAK,EAAE;IACpBJ,OAAO,CAACI,KAAK,CAACA,KAAK,CAAC;EACxB,CAAC,CAAC;AACV;AACAJ,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAExB,KAAK,CAAC;AAEzC,OAAO,SAAS4B,gBAAgB,GAAE;EAC9B,MAAMC,OAAO,GAAGC,IAAI,CAACC,GAAG,EAAE;EAC1B,MAAMC,IAAI,GAAG,IAAIF,IAAI,CAACD,OAAO,CAAC;EAC9B,OAAQI,IAAI,CAACC,KAAK,CAACF,IAAI,CAACG,OAAO,EAAE,GAAC,IAAI,CAAC,GAAG,IAAI;AAClD;AAAC,KAJeP,gBAAgB;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}